<?php

namespace Illuminate\Support\Facades;

/**
 * @see \Illuminate\Foundation\Application 
 * @method static string version()
 * @method static void bootstrapWith(array $bootstrappers)
 * @method static void afterLoadingEnvironment(\Closure $callback)
 * @method static void beforeBootstrapping($bootstrapper, \Closure $callback)
 * @method static void afterBootstrapping($bootstrapper, \Closure $callback)
 * @method static bool hasBeenBootstrapped()
 * @method static setBasePath($basePath)
 * @method static string path()
 * @method static string basePath()
 * @method static string configPath()
 * @method static string databasePath()
 * @method static useDatabasePath($path)
 * @method static string langPath()
 * @method static string publicPath()
 * @method static string storagePath()
 * @method static useStoragePath($path)
 * @method static string environmentPath()
 * @method static useEnvironmentPath($path)
 * @method static loadEnvironmentFrom($file)
 * @method static string environmentFile()
 * @method static string environment()
 * @method static bool isLocal()
 * @method static string detectEnvironment(\Closure $callback)
 * @method static bool runningInConsole()
 * @method static bool runningUnitTests()
 * @method static void registerConfiguredProviders()
 * @method static \Illuminate\Support\ServiceProvider register($provider, $options = [], $force = false)
 * @method static \Illuminate\Support\ServiceProvider getProvider($provider)
 * @method static \Illuminate\Support\ServiceProvider resolveProviderClass($provider)
 * @method static void loadDeferredProviders()
 * @method static void loadDeferredProvider($service)
 * @method static void registerDeferredProvider($provider, $service = null)
 * @method static mixed make($abstract, array $parameters = [])
 * @method static bool bound($abstract)
 * @method static bool isBooted()
 * @method static void boot()
 * @method static void booting($callback)
 * @method static void booted($callback)
 * @method static handle(\Symfony\Component\HttpFoundation\Request $request, $type = \Illuminate\Foundation\Application::MASTER_REQUEST, $catch = true)
 * @method static bool shouldSkipMiddleware()
 * @method static bool configurationIsCached()
 * @method static string getCachedConfigPath()
 * @method static bool routesAreCached()
 * @method static string getCachedRoutesPath()
 * @method static string getCachedCompilePath()
 * @method static string getCachedServicesPath()
 * @method static bool isDownForMaintenance()
 * @method static void abort($code, $message = "", array $headers = [])
 * @method static terminating(\Closure $callback)
 * @method static void terminate()
 * @method static array getLoadedProviders()
 * @method static array getDeferredServices()
 * @method static void setDeferredServices(array $services)
 * @method static void addDeferredServices(array $services)
 * @method static bool isDeferredService($service)
 * @method static configureMonologUsing(callable $callback)
 * @method static bool hasMonologConfigurator()
 * @method static callable getMonologConfigurator()
 * @method static string getLocale()
 * @method static void setLocale($locale)
 * @method static void registerCoreContainerAliases()
 * @method static void flush()
 * @method static string getNamespace()
 * @method static \Illuminate\Contracts\Container\ContextualBindingBuilder when($concrete)
 * @method static bool resolved($abstract)
 * @method static bool isAlias($name)
 * @method static void bind($abstract, $concrete = null, $shared = false)
 * @method static void addContextualBinding($concrete, $abstract, $implementation)
 * @method static void bindIf($abstract, $concrete = null, $shared = false)
 * @method static void singleton($abstract, $concrete = null)
 * @method static \Closure share(\Closure $closure)
 * @method static void extend($abstract, \Closure $closure)
 * @method static void instance($abstract, $instance)
 * @method static void tag($abstracts, $tags)
 * @method static array tagged($tag)
 * @method static void alias($abstract, $alias)
 * @method static mixed rebinding($abstract, \Closure $callback)
 * @method static mixed refresh($abstract, $target, $method)
 * @method static \Closure wrap(\Closure $callback, array $parameters = [])
 * @method static mixed call($callback, array $parameters = [], $defaultMethod = null)
 * @method static mixed build($concrete, array $parameters = [])
 * @method static void resolving($abstract, \Closure $callback = null)
 * @method static void afterResolving($abstract, \Closure $callback = null)
 * @method static bool isShared($abstract)
 * @method static array getBindings()
 * @method static void forgetInstance($abstract)
 * @method static void forgetInstances()
 * @method static bool offsetExists($key)
 * @method static mixed offsetGet($key)
 * @method static void offsetSet($key, $value)
 * @method static void offsetUnset($key)
 */
class App extends Facade
{
    /**
     * Get the registered name of the component.
     *
     * @return string
     */
    protected static function getFacadeAccessor()
    {
        return 'app';
    }
}
